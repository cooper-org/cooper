[build-system]
build-backend = "hatchling.build"
requires = [
    "hatchling>=1.1.0",
    "hatch-vcs>=0.4.0",
]

[project]
name = "cooper-optim"
description = "cooper is a toolkit for Lagrangian-based constrained optimization in PyTorch"
readme = { file = "README.md", content-type = "text/markdown" }
license = { text = "MIT License" }
maintainers = [
    { name = "Jose Gallego-Posada", email = "jgalle29@gmail.com" },
    { name = "Juan Ramirez", email = "juan43.ramirez@gmail.com" },
    { name = "Meraj Hashemizadeh", email = "merajhashemi@yahoo.co.uk" },
]
authors = [
    { name = "Jose Gallego-Posada", email = "jgalle29@gmail.com" },
    { name = "Juan Ramirez", email = "juan43.ramirez@gmail.com" },
    { name = "Meraj Hashemizadeh", email = "merajhashemi@yahoo.co.uk" },
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dynamic = ["version"]
dependencies = [
    "numpy>=1.22.0,<2.0.0", # PyTorch 2.2.2 and older don't support NumPy 2.0.
    "torch>=1.13.1",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    "build>=1.2.1",
    "cvxpy>=1.5.2",
    "jupytext==1.16.3",
    "mypy>=1.11.1",
    "pre-commit>=3.7.1",
    "pytest>=8.3.2",
    "coverage>=7.6.1",
    "ruff==0.5.7",
    "twine>=5.1.1",
]
docs = [
    "matplotlib>=3.8.4,<4.0.0",
    "myst-nb>=1.1.1",
    "sphinx>=7.4.7",
    "sphinx-autobuild>=2024.4.16",
    "sphinx-autodoc-typehints>=2.2.3",
    "sphinx-copybutton>=0.5.2",
    "sphinx-rtd-theme>=2.0.0",
    "sphinxcontrib-bibtex>=2.6.2",
    "torchvision>=0.13.0,<1.0.0",
]
examples = [
    "matplotlib>=3.8.4,<4.0.0",
    "torchvision>=0.13.0,<1.0.0",
]
tests = [
    "cvxpy>=1.5.2",
    "pytest>=8.3.2",
    "coverage>=7.6.1",
]

[project.urls]
Homepage = "https://github.com/cooper-org/cooper"
Documentation = "https://cooper.readthedocs.io"
Repository = "https://github.com/cooper-org/cooper"
Issues = "https://github.com/cooper-org/cooper/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/cooper"]

[tool.hatch.build.targets.sdist]
exclude = [
    "docs",
    ".github",
    ".readthedocs.yaml",
]

[tool.hatch.version]
source = "vcs"

[tool.mypy]
packages = ["cooper"]
warn_unused_configs = true

[tool.ruff]
line-length = 120
target-version = "py39"
extend-include = ["*.ipynb"]

[tool.ruff.lint.isort]
known-first-party = ["cooper", "tests"]

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "B028",     # Stacklevel in warnings
    "E501",     # Line length (handled by ruff-format)
    "E731",     # Lambda function
    "W505",     # Doc Line length
    "D1",       # TODO: Remove this line when we have docstrings for all functions
    "D205",     # 1 blank line required between summary line and description in docstrings
    "DOC",      # Docstring missing exceptions/returns
    "ISC001",   # Fixed by ruff-format
    "COM812",   # Fixed by ruff-format
    "FA",       # Future type annotations
    "CPY",      # Copyright notice
    "TRY003",   # Long Exception message
    "SLF",      # Private (underscore) attribute access
    "EM",       # Exception message not in seperate msg variable
    "PLR09",    # Too many arguments
    "PLR2004",  # Use of value instead of constant variable
    "PLR6104",  # Forces in-place operations, for example, x += 1 instead of x = x + 1
    "PLR6301",  # Self not used in method
    "PLW2901",  # For loop variable is overwritten
    "FBT",      # Boolean trap
    "FIX",      # Fixmes
    "TD",       # TODOs
    "ANN401",   # Any type annotation
    "PTH",      # Use Pathlib instead of os.path
    "FURB140",  # Use itertools.starmap instead of list comprehension
    "NPY002",   # numpy.random.Generator is preferred over numpy.random.seed
    "RET504",   # Unnecessary assignment before return
    "S101",     # Use of assert
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ANN", "C901", "N801", "N802", "N803", "N806"]
"docs/*" = ["ANN"]
"docs/source/conf.py" = ["A001", "ERA001", "INP001"]
"docs/source/notebooks/*" = ["N801", "N802", "N803", "N806"]
"src/cooper/optim/torch_optimizers/nupi_optimizer.py" = ["C901", "N801", "N802", "N803", "N806"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.coverage.run]
relative_files = true
